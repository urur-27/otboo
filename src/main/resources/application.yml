spring:
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:local}
  config:
    import: optional:file:.env[.properties]
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:postgres}
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:root}
    driver-class-name: org.postgresql.Driver
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      ssl:
        enabled: true
  jpa:
    show-sql: false
    properties:
      hibernate:
        format_sql: true
  messages:
    basename: messages
  # SMTP = Simple Mail Transfer Protocol
  mail:
    host: smtp.gmail.com        # gmail로 발송하겠다는 뜻
    port: 587                   # TLS 암호화 통신을 위한 표준 포트
    username: ${EMAIL_SEND}     # 발송할 이메일
    password: ${PASSWORD_SEND}  # 발송할 이메일의 비밀번호
    properties:
      mail:
        smtp:
          auth: true            # 인증
          starttls:
            enable: true        # 통신 보호
  security:
    oauth2:
      client:
        registration:
          # google
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            client-name: Google
            # 가져올 정보들
            scope:
              - email
              - profile
          # kakao
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            client-authentication-method: client_secret_post     # 카카오는 post방식 사용
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            client-name: Kakao
            # 가져올 정보들
            scope:
              # 필수
              - profile_nickname
              # 선택
              - profile_image
        # 개별 설정 필요
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id     # 카카오에서 사용자를 식별하는 고유 ID 값

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      enable-auto-commit: false

  elasticsearch:
    uris:
      - http://15.164.170.61:9200

server:
  port: 8080

logging:
  level:
    root: info
    com.team3: debug

otboo:
  storage:
    type: ${STORAGE_TYPE:local}
    local:
      root-path: ${STORAGE_LOCAL_ROOT_PATH:.otboo}
      public-path: ${STORAGE_LOCAL_PUBLIC_PATH:/uploads/}  # 브라우저가 접근할 URL prefix
    s3:
      access-key: ${AWS_S3_ACCESS_KEY:}
      secret-key: ${AWS_S3_SECRET_KEY:}
      region: ${AWS_S3_REGION}
      bucket: ${AWS_S3_BUCKET}
      baseUrl: ${AWS_S3_BUCKET_URL:}
      presigned-url-expiration: ${AWS_S3_PRESIGNED_URL_EXPIRATION:600} # (기본값: 10분)

external:
  apis:
    kakao-map:
      base-url: ${KAKAO_MAP_URL}
      connect-timeout: ${KAKAO_MAP_CONNECT_TIMEOUT}
      read-timeout: ${KAKAO_MAP_READ_TIMEOUT}
      api-key: ${KAKAO_MAP_API_KEY}
    weather:
      base-url: ${WEATHER_URL}
      connect-timeout: ${WEATHER_CONNECT_TIMEOUT}
      read-timeout: ${WEATHER_READ_TIMEOUT}
      api-key: ${WEATHER_API_KEY}

resilience4j:
  circuitbreaker:
    instances:
      locationRestTemplate:
        failureRateThreshold: 50
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        waitDurationInOpenState: 10s
      weatherRestTemplate:
        failureRateThreshold: 50
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        waitDurationInOpenState: 10s

security:
  jwt:
    secret: ${SECURITY_JWT_KEY}
    access-token-validity-seconds: ${SECURITY_JWT_ACCESS_TOKEN_VALIDITY_SECONDS}
    refresh-token-validity-seconds: ${SECURITY_JWT_REFRESH_TOKEN_VALIDITY_SECONDS}

admin:
  username: ${ADMIN_USERNAME}
  email: ${ADMIN_EMAIL}
  password: ${ADMIN_PASSWORD}

oauth:
  frontend-redirect-url: http://localhost:8080

management:
  endpoints:
    web:
      exposure:
        include: health,info

llm:
  base-url: ${LLM_BASE_URL:http://localhost:8000}
  timeout-ms: ${LLM_TIMEOUT_MS:40000}
  default-provider: ${LLM_PROVIDER:openai}      # 없으면 null 허용
  default-model: ${LLM_MODEL:gpt-4o-mini}   # 없으면 null 허용
