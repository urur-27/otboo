spring:
  config:
    import: optional:file:.env[.properties]
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:postgres}
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:root}
    driver-class-name: org.postgresql.Driver
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
  jpa:
    show-sql: true
    properties:
      hibernate:
        format_sql: true

server:
  port: 8080

logging:
  level:
    root: info
    com.team3: debug

otboo:
  storage:
    type: ${STORAGE_TYPE:local}
    local:
      root-path: ${STORAGE_LOCAL_ROOT_PATH:.otboo}
    s3:
      access-key: ${AWS_S3_ACCESS_KEY}
      secret-key: ${AWS_S3_SECRET_KEY}
      region: ${AWS_S3_REGION}
      bucket: ${AWS_S3_BUCKET}
      baseUrl: ${AWS_S3_BUCKET_URL}
      presigned-url-expiration: ${AWS_S3_PRESIGNED_URL_EXPIRATION:600} # (기본값: 10분)

external:
  apis:
    kakao-map:
      base-url: ${KAKAO_MAP_URL}
      connect-timeout: ${KAKAO_MAP_CONNECT_TIMEOUT}
      read-timeout: ${KAKAO_MAP_READ_TIMEOUT}
      api-key: ${KAKAO_MAP_API_KEY}

resilience4j:
  circuitbreaker:
    instances:
      locationRestTemplate:
        failureRateThreshold: 50
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        waitDurationInOpenState: 10s

openai:
  model: ${OPENAI_MODEL:gpt-4o-mini}
  temperature: ${OPENAI_TEMPERATURE:0.2}
  max-tokens: ${OPENAI_MAX_TOKENS:600}
  api-key: ${OPENAI_API_KEY}

security:
  jwt:
    secret: ${SECURITY_JWT_KEY}
    access-token-validity-seconds: ${SECURITY_JWT_ACCESS_TOKEN_VALIDITY_SECONDS}
    refresh-token-validity-seconds: ${SECURITY_JWT_REFRESH_TOKEN_VALIDITY_SECONDS}

admin:
  username: ${ADMIN_USERNAME}
  email: ${ADMIN_EMAIL}
  password: ${ADMIN_PASSWORD}