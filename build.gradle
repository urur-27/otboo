plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.team3'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly { extendsFrom annotationProcessor }
}

repositories { mavenCentral() }

sourceSets {
    main {
        java {
            srcDirs += "$buildDir/generated/sources/annotationProcessor/java/main"
        }
    }
}

dependencies {
    /* ─── Spring Boot Starters ─── */
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.kafka:spring-kafka'
    // Jackson Java 8 시간 타입(JSR-310) 지원 모듈
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    /* ─── Database ─── */
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0"

    // AOP 지원 (Resilience4j @CircuitBreaker 사용을 위해)
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // Resilience4j CircuitBreaker
    implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.2.0'
    runtimeOnly 'com.h2database:h2'   // 로컬·테스트용 H2

    /* ─── AWS ─── */
    implementation 'software.amazon.awssdk:s3:2.31.7'

    /* ─── QueryDSL ─── */
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    /* ─── Code Generation ─── */
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    /* ─── Testing ─── */
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testCompileOnly 'org.projectlombok:lombok'      // 테스트용 Lombok
    testAnnotationProcessor 'org.projectlombok:lombok'

    // 크롤링을 위한 jsoup
    implementation 'org.jsoup:jsoup:1.17.2'

    // JWT
    implementation 'com.nimbusds:nimbus-jose-jwt:10.3'

    // Email 전송
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // OAuth
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // AWS IAM
    implementation 'software.amazon.msk:aws-msk-iam-auth:2.0.2'

    // 비동기 처리를 위한 webflux
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    implementation 'org.jetbrains:annotations:24.0.1'

    // Elastic Search
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'

    // MongoDB
//    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
}

tasks.named('test') {
    useJUnitPlatform()
}
